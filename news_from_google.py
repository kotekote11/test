import os
import json
import logging
import asyncio
import random
import requests
from aiohttp import ClientSession
from bs4 import BeautifulSoup
from urllib.parse import quote

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API Telegram
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
SENT_LIST_FILE = 'dump.json'

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
KEYWORDS = [
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2025",
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2026",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2025",
]

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–ª–æ–≤–∞
MUST_HAVE_WORDS = {"—Ñ–æ–Ω—Ç–∞–Ω", "—Å–≤–µ—Ç–æ–º—É–∑—ã–∫–∞–ª—å–Ω", "—Ñ–æ–Ω—Ç–∞–Ω–∞"}
IGNORE_WORDS = {"–∫–∞–Ω–∞–ª–∏–∑", "–Ω–µ—Ñ—Ç—å", "–û–±—ä—è–≤–ª–µ–Ω–∏—è"}
IGNORE_SITES = {"instagram", "livejournal", "avito"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def load_sent_list():
    if os.path.exists(SENT_LIST_FILE):
        with open(SENT_LIST_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def save_sent_list(sent_list):
    with open(SENT_LIST_FILE, 'w', encoding='utf-8') as file:
        json.dump(sent_list, file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_message(session, message):
    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
    payload = {
        'chat_id': CHANNEL_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    async with session.post(url, json=payload) as response:
        if response.status != 200:
            logging.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #fontan: {response.status} - {await response.text()}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
async def check_link_availability(link):
    try:
        response = requests.head(link)
        return response.status_code == 200
    except Exception as e:
        logging.warning(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å—Å—ã–ª–∫–µ #fontan: {link} - {e}')
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ URL
def clean_url(url):
    return url.split('?')[0]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Yandex
async def search_yandex(session, keyword):
    encoded_keyword = quote(keyword)
    query = f'https://yandex.ru/search/?text={encoded_keyword}&within=77'
    user_agents = [
        "Mozilla/5.0 (Windows NT 6.1; rv:109.0) Gecko/20100101 Firefox/113.0",
        "Mozilla/5.0 (Android 12; Mobile; rv:109.0) Gecko/113.0 Firefox/113.0",
    ]
    
    headers = {'User-Agent': random.choice(user_agents)}
    logging.debug(f'–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Yandex –ø–æ –∞–¥—Ä–µ—Å—É: {query} —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {headers}')
    
    async with session.get(query, headers=headers) as response:
        if response.status != 200:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ #fontan: {response.status} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}')
            return []
        
        soup = BeautifulSoup(await response.text(), 'html.parser')
        results = []

        for item in soup.find_all('h2'):
            parent_link = item.find_parent('a')
            if parent_link and 'href' in parent_link.attrs:
                link = clean_url(parent_link['href'])
                title = item.get_text()

                results.append((title, link))
        
        logging.info(f'–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {keyword} –≤ #fontan.')
        return results

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async def check_news(sem, sent_set):
    async with ClientSession() as session:
        for keyword in random.sample(KEYWORDS, len(KEYWORDS)):  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º KEYWORDS –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            async with sem:
                logging.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è: {keyword}')
                
                news_from_yandex = await search_yandex(session, keyword)

                for title, link in news_from_yandex:
                    if any(ignore in title for ignore in IGNORE_WORDS):
                        logging.info(f'–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: "{title}", —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–ª–æ–≤–∞.')
                        continue
                    
                    if any(ignore in link for ignore in IGNORE_SITES):
                        logging.info(f'–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É: {link}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–∞–π—Ç—ã.')
                        continue

                    if link not in sent_set and await check_link_availability(link):
                        sent_set.add(link)
                        message_text_yandex = f"{title}\n{link}\n‚õ≤@MonitoringFontanüì∞#fontan"
                        await send_message(session, message_text_yandex)
                    else:
                        logging.info(f'–°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—á–∞—è #fontan: {link}')

                save_sent_list(list(sent_set))
                await asyncio.sleep(random.randint(5, 15))  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    sem = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    sent_set = set(load_sent_list())  # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏

    while True:
        await check_news(sem, sent_set)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        await asyncio.sleep(1300)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

if __name__ == '__main__':
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
