import os
import json
import logging
import aiohttp
import asyncio
import random
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s [%(levelname)s]: %(message)s",
                    handlers=[logging.StreamHandler()])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
SENT_LIST_FILE = 'dump.json'

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
KEYWORDS = [
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2025",
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2026",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2025"
]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
MUST_HAVE_WORDS = {"—Ñ–æ–Ω—Ç–∞–Ω", "—Å–≤–µ—Ç–æ–º—É–∑—ã–∫–∞–ª—å–Ω", "—Ñ–æ–Ω—Ç–∞–Ω–∞"}
IGNORE_WORDS = {"–∫–∞–Ω–∞–ª–∏–∑", "–Ω–µ—Ñ—Ç—å", "–û–±—ä—è–≤–ª–µ–Ω–∏—è"}
IGNORE_SITES = {"instagram", "livejournal", "avito"}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
user_agents = [
        "Mozilla/5.0 (Windows NT 6.1; rv:109.0) Gecko/20100101 Firefox/113.0",
        "Mozilla/5.0 (Android 12; Mobile; rv:109.0) Gecko/113.0 Firefox/113.0",
        "Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16",
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/113.0",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
        "Mozilla/5.0 (X11; OpenBSD i386) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36",
        "Mozilla/5.0 (X11; CrOS i686 4319.74.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35",
        "Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko ) Version/5.1 Mobile/9B176 Safari/7534.48.3",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35",
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö URL
def load_sent_list():
    try:
        with open(SENT_LIST_FILE, 'r', encoding='utf-8') as file:
            return set(json.load(file))
    except FileNotFoundError:
        return set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö URL
def save_sent_list(sent_list):
    with open(SENT_LIST_FILE, 'w', encoding='utf-8') as file:
        json.dump(list(sent_list), file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ URL
def clean_url(link):
    if link.startswith("http"):
        return link
    return f'https://yandex.ru{link}'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message_text):
    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json={"chat_id": CHANNEL_ID, "text": message_text}) as response:
            if response.status != 200:
                logging.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #fontan: {response.status} - {await response.text()}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ Yandex
async def search_yandex(session, keyword):
    results = []
    query = f'https://yandex.ru/search/?text={keyword}&within=77'
    headers = {'User-Agent': random.choice(user_agents)}

    try:
        async with session.get(query, headers=headers) as response:
            if response.status != 200:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ #fontan: {response.status} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}')
                return results
            
            html = await response.text()
            soup = BeautifulSoup(html, 'html.parser')

            for item in soup.find_all('a', href=True):
                title = item.get_text()
                link = clean_url(item['href'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∞–π—Ç—ã
                if any(word in title for word in IGNORE_WORDS):
                    logging.info(f'–ù–∞–π–¥–µ–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–µ —Å–ª–æ–≤–æ #fontan: {title}')
                    continue
                if any(site in link for site in IGNORE_SITES):
                    logging.info(f'–ù–∞–π–¥–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç #fontan: {link}')
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
                if not any(word in title.lower() for word in MUST_HAVE_WORDS):

                    continue
                
                try:
                    async with session.head(link) as link_response:
                        if link_response.status == 200:
                            results.append({'title': title, 'link': link})
                        else:
                            logging.info(f'–°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—á–∞—è #fontan: {link}')
                except Exception as e:
                    logging.warning(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å—Å—ã–ª–∫–µ #fontan: {link} - {e}')

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ #fontan: {e}')
    
    logging.info(f'–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {keyword} –≤ #fontan.')
    return results

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async def main():
    sent_set = load_sent_list()

    async with aiohttp.ClientSession() as session:
        while True:
            random_keyword = random.choice(KEYWORDS)  # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            logging.info(f'–ò—Å–∫–∞—Ç—å –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {random_keyword}')
            
            news_from_yandex = await search_yandex(session, random_keyword)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            for news in news_from_yandex:
                if news['link'] not in sent_set:
                    message_text_yandex = f"{news['title']}\n{news['link']}\n‚õ≤@MonitoringFontanüì∞#fontan"
                    await send_telegram_message(message_text_yandex)
                    sent_set.add(news['link'])
                    logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text_yandex}')
                    await asyncio.sleep(random.randint(5, 15))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            save_sent_list(sent_set)
            await asyncio.sleep(777)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º

if __name__ == "__main__":
    asyncio.run(main())
