import os
import logging
import random
import aiohttp
import asyncio
import json
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ API –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
SENT_LIST_FILE = 'dump.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = [
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–æ–≤",
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ 2025",
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω—Ç–∞–Ω–∞"
]

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∞–π—Ç—ã
IGNORE_WORDS = {"–Ω–µ—Ñ—Ç—å", "–Ω–µ–¥—Ä", "–º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ"}
IGNORE_SITES = {"instagram", "livejournal", "fontanka"}


def clean_url(url):
    """–û—á–∏—â–∞–µ—Ç URL –æ—Ç '/url?q=' –∏ –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    if url.startswith('/url?q='):
        url = url[len('/url?q='):]
    if '&sa=U&ved' in url:
        url = url.split('&sa=U&ved')[0]
    return url


async def load_sent_news():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    if os.path.exists(SENT_LIST_FILE):
        try:
            with open(SENT_LIST_FILE, 'r', encoding='utf-8') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.")
            return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


async def save_sent_news(sent_news):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª."""
    with open(SENT_LIST_FILE, 'w', encoding='utf-8') as file:
        json.dump(sent_news, file)


async def search_google(session, keyword):
    """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ Google –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É."""
    query = f'https://www.google.ru/search?q={keyword}&hl=ru&tbs=qdr:d'
    async with session.get(query) as response:
        response.raise_for_status()
        soup = BeautifulSoup(await response.text(), 'html.parser')
        news = []

        # –ù–∞–π–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Å—ã–ª–∫–∏
        for item in soup.find_all('h3'):
            title = item.get_text()
            link = item.find_parent('a')['href']
            cleaned_link = clean_url(link)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news.append({'title': title, 'link': cleaned_link})

        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}': {len(news)}")
        return news


async def search_yandex(session, keyword):
    """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ Yandex –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É."""
    query = f'https://yandex.ru/search/?text={keyword}&within=77'
    
    try:
        async with session.get(query) as response:
            response.raise_for_status()
            soup = BeautifulSoup(await response.text(), 'html.parser')
            news = []

            # –ù–∞–π–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Å—ã–ª–∫–∏
            for item in soup.find_all('h3'):
                title = item.get_text()
                link = item.find_parent('a')['href']
                cleaned_link = clean_url(link)


                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news.append({'title': title, 'link': cleaned_link})

            logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}': {len(news)}")
            return news

    except aiohttp.ClientResponseError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {e}")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏


async def send_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
    async with aiohttp.ClientSession() as session:
        url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
        payload = {
            'chat_id': CHANNEL_ID,
            'text': text,
            'parse_mode': 'HTML'
        }
        async with session.post(url, json=payload) as response:
            response.raise_for_status()
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return True


async def send_random_news():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª."""
    sent_news = await load_sent_news()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    sent_titles = {item['title'] for item in sent_news}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    async with aiohttp.ClientSession() as session:
        for keyword in KEYWORDS:
            news_from_google = await search_google(session, keyword)  # –ü–æ–∏—Å–∫ –Ω–∞ Google
            news_from_yandex = await search_yandex(session, keyword)  # –ü–æ–∏—Å–∫ –Ω–∞ Yandex

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            all_news = news_from_google + news_from_yandex

            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º –∏ —Å–∞–π—Ç–∞–º
            filtered_news = []
            for item in all_news:
                title = item['title']
                link = item['link']
                site = link.split('/')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Å–∞–π—Ç–æ–≤
                if title not in sent_titles and not any(word in title.lower() for word in IGNORE_WORDS) and not any(site in link for site in IGNORE_SITES):
                    filtered_news.append(item)

            if filtered_news:
                random_news = random.choice(filtered_news)
                title = random_news['title']
                link = random_news['link']

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
                message_text = f"{title}\n{link}\n‚õ≤@MonitoringFontan    üì∞#MonitoringFontan"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if await send_message(message_text):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
                    sent_news.append({'title': title, 'link': link})
                    await save_sent_news(sent_news)
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    while True:
        await send_random_news()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        await asyncio.sleep(300)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (5 –º–∏–Ω—É—Ç)


if __name__ == '__main__':
    asyncio.run(main())
